<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.camelot.pmt.task.mapper.TaskMapper">
    <!--通用insert动态代码columns-->
    <sql id="sql_add_task_columns">
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="taskNum != null">task_num,</if>
            <if test="taskName != null">task_name,</if>
            <if test="taskParentId != null">task_parent_id,</if>
            <if test="project != null">project_id,</if>
            <if test="demand != null">demand_id,</if>
            <if test="priority != null">priority,</if>
            <if test="assignUser != null">assign_user_id,</if>
            <if test="beassignUser != null">beassign_user_id,</if>
            <if test="assignTime != null">assign_time,</if>
            <if test="estimateStartTime != null">estimate_start_time,</if>
            <if test="estimateEndTime != null">estimate_end_time,</if>
            <if test="actualStartTime != null">actual_start_time,</if>
            <if test="actualEndTime != null">actual_end_time,</if>
            <if test="taskType != null">task_type,</if>
            <if test="taskSpeed != null">task_speed,</if>
            <if test="status != null">status,</if>
            <if test="nodeLv != null">node_lv,</if>
            <if test="taskDescribe != null">task_describe,</if>
            <if test="demandChange != null">demand_change,</if>
            <if test="delayDescribe != null">delay_describe,</if>
            <if test="estimateHour != null">estimate_hour,</if>
            <if test="infactHour != null">infact_hour,</if>
            <if test="taskMileage != null">task_mileage,</if>
            <if test="createUser != null">create_user_id,</if>
            <if test="modifyUserId != null">modify_user_id,</if>
            <if test="createTime != null">create_time,</if>
            <if test="modifyTime != null">modify_time</if>
        </trim>
    </sql>

    <!--通用insert动态代码属性-->
    <sql id="sql_add_task_properties">
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id,jdbcType=BIGINT},</if>
            <if test="taskNum != null">#{taskNum,jdbcType=VARCHAR},</if>
            <if test="taskName != null">#{taskName,jdbcType=VARCHAR},</if>
            <if test="taskParentId != null">#{taskParentId,jdbcType=BIGINT},</if>
            <if test="project != null">#{projectId,jdbcType=BIGINT},</if>
            <if test="demand != null">#{demandId,jdbcType=BIGINT},</if>
            <if test="priority != null">#{priority,jdbcType=CHAR},</if>
            <if test="assignUser != null">#{assignUser.userId,jdbcType=VARCHAR},</if>
            <if test="beassignUser != null">#{beassignUser.userId,jdbcType=VARCHAR},</if>
            <if test="assignTime != null">#{assignTime,jdbcType=TIMESTAMP},</if>
            <if test="estimateStartTime != null">#{estimateStartTime,jdbcType=TIMESTAMP},</if>
            <if test="estimateEndTime != null">#{estimateEndTime,jdbcType=TIMESTAMP},</if>
            <if test="actualStartTime != null">#{actualStartTime,jdbcType=TIMESTAMP},</if>
            <if test="actualEndTime != null">#{actualEndTime,jdbcType=TIMESTAMP},</if>
            <if test="taskType != null">#{taskType,jdbcType=CHAR},</if>
            <if test="taskSpeed != null">#{taskSpeed,jdbcType=VARCHAR},</if>
            <if test="status != null">#{status,jdbcType=CHAR},</if>
            <if test="nodeLv != null">#{nodeLv,jdbcType=CHAR},</if>
            <if test="taskDescribe != null">#{taskDescribe,jdbcType=VARCHAR},</if>
            <if test="demandChange != null">#{demandChange,jdbcType=CHAR},</if>
            <if test="delayDescribe != null">#{delayDescribe,jdbcType=VARCHAR},</if>
            <if test="estimateHour != null">#{estimateHour,jdbcType=BIGINT},</if>
            <if test="infactHour != null">#{infactHour,jdbcType=BIGINT},</if>
            <if test="taskMileage != null">#{taskMileage,jdbcType=CHAR},</if>
            <if test="createUser != null">#{createUser.userId,jdbcType=VARCHAR},</if>
            <if test="modifyUserId != null">#{modifyUserId,jdbcType=VARCHAR},</if>
            <if test="createTime != null">#{createTime,jdbcType=TIMESTAMP},</if>
            <if test="modifyTime != null">#{modifyTime,jdbcType=TIMESTAMP}</if>
        </trim>
    </sql>

    <!--通用update动态代码-->
    <sql id="sql_update_task">
        <set>
            <if test="taskNum != null">
                task_num = #{taskNum,jdbcType=VARCHAR},
            </if>
            <if test="taskName != null">
                task_name = #{taskName,jdbcType=VARCHAR},
            </if>
            <if test="taskParentId != null">
                task_parent_id = #{taskParentId,jdbcType=BIGINT},
            </if>
            <if test="project != null">
                project_id = #{project.id,jdbcType=BIGINT},
            </if>
            <if test="demand != null">
                demand_id = #{demand.id,jdbcType=BIGINT},
            </if>
            <if test="priority != null">
                priority = #{priority,jdbcType=CHAR},
            </if>
            <if test="assignUser != null">
                assign_user_id = #{assignUser.userId,jdbcType=VARCHAR},
            </if>
            <if test="beassignUser != null">
                beassign_user_id = #{beassignUser.userId,jdbcType=VARCHAR},
            </if>
            <if test="assignTime != null">
                assign_time = #{assignTime,jdbcType=TIMESTAMP},
            </if>
            <if test="estimateStartTime != null">
                estimate_start_time = #{estimateStartTime,jdbcType=TIMESTAMP},
            </if>
            <if test="estimateEndTime != null">
                estimate_end_time = #{estimateEndTime,jdbcType=TIMESTAMP},
            </if>
            <if test="actualStartTime != null">
                actual_start_time = #{actualStartTime,jdbcType=TIMESTAMP},
            </if>
            <if test="actualEndTime != null">
                actual_end_time = #{actualEndTime,jdbcType=TIMESTAMP},
            </if>
            <if test="taskType != null">
                task_type = #{taskType,jdbcType=CHAR},
            </if>
            <if test="taskSpeed != null">
                task_speed = #{taskSpeed,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=CHAR},
            </if>
            <if test="nodeLv != null">
                node_lv = #{nodeLv,jdbcType=CHAR},
            </if>
            <if test="taskDescribe != null">
                task_describe = #{taskDescribe,jdbcType=VARCHAR},
            </if>
            <if test="demandChange != null">
                demand_change = #{demandChange,jdbcType=CHAR},
            </if>
            <if test="delayDescribe != null">
                delay_describe = #{delayDescribe,jdbcType=VARCHAR},
            </if>
            <if test="estimateHour != null">
                estimate_hour = #{estimateHour,jdbcType=BIGINT},
            </if>
            <if test="infactHour != null">
                infact_hour = #{infactHour,jdbcType=BIGINT},
            </if>
            <if test="taskMileage != null">
                task_mileage = #{taskMileage,jdbcType=CHAR},
            </if>
            <if test="createUser != null">
                create_user_id = #{createUser.userId,jdbcType=VARCHAR},
            </if>
            <if test="modifyUserId != null">
                modify_user_id = #{modifyUserId,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="modifyTime != null">
                modify_time = #{modifyTime,jdbcType=TIMESTAMP},
            </if>
        </set>
    </sql>

    <!--通用resultMap-->
    <resultMap id="BaseResultMap" type="com.camelot.pmt.task.model.Task">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="task_num" property="taskNum" jdbcType="VARCHAR"/>
        <result column="task_name" property="taskName" jdbcType="VARCHAR"/>
        <result column="task_parent_id" property="taskParentId" jdbcType="BIGINT"/>
        <result column="priority" property="priority" jdbcType="CHAR"/>
        <result column="assign_time" property="assignTime" jdbcType="TIMESTAMP"/>
        <result column="estimate_start_time" property="estimateStartTime" jdbcType="TIMESTAMP"/>
        <result column="estimate_end_time" property="estimateEndTime" jdbcType="TIMESTAMP"/>
        <result column="actual_start_time" property="actualStartTime" jdbcType="TIMESTAMP"/>
        <result column="actual_end_time" property="actualEndTime" jdbcType="TIMESTAMP"/>
        <result column="task_type" property="taskType" jdbcType="CHAR"/>
        <result column="task_speed" property="taskSpeed" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="CHAR"/>
        <result column="node_lv" property="nodeLv" jdbcType="CHAR"/>
        <result column="task_describe" property="taskDescribe" jdbcType="VARCHAR"/>
        <result column="demand_change" property="demandChange" jdbcType="CHAR"/>
        <result column="delay_describe" property="delayDescribe" jdbcType="VARCHAR"/>
        <result column="estimate_hour" property="estimateHour" jdbcType="BIGINT"/>
        <result column="infact_hour" property="infactHour" jdbcType="BIGINT"/>
        <result column="task_mileage" property="taskMileage" jdbcType="CHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP"/>
        <result column="elapsed_time" property="elapsedTime" jdbcType="VARCHAR"/>
        <result column="remaining_work" property="remainingWork" jdbcType="VARCHAR"/>
        <association property="project"  javaType="com.camelot.pmt.project.model.ProjectMain">
            <result property="id" column="pid"/>
            <result property="projectName" column="project_name"/>
        </association>
        <association property="demand" javaType="com.camelot.pmt.project.model.Demand">
            <result property="id" column="did"/>
            <result property="demandDesc" column="demand_desc"/>
        </association>
        <association property="createUser" javaType="com.camelot.pmt.platform.model.User">
            <result property="id" column="cid"/>
            <result property="userId" column="cuser_id"/>
            <result property="username" column="cuser_name"/>
        </association>
        <association property="assignUser" javaType="com.camelot.pmt.platform.model.User">
            <result property="id" column="aid"/>
            <result property="userId" column="auser_id"/>
            <result property="username" column="auser_name"/>
        </association>
        <association property="beassignUser" javaType="com.camelot.pmt.platform.model.User">
            <result property="id" column="bid"/>
            <result property="userId" column="buser_id"/>
            <result property="username" column="buser_name"/>
        </association>
    </resultMap>

    <!--通用多表（项目表、指派user表、负责user表、创建user表、需求表）查所有-->
    <sql id="ShowAllTasks_Column_List">
        t.id, t.task_num, t.task_name, t.task_parent_id, t.project_id, t.demand_id, t.priority, t.assign_user_id,
        t.beassign_user_id, t.assign_time, t.estimate_start_time, t.estimate_end_time, t.actual_start_time,
        t.actual_end_time, t.task_type, t.task_speed, t.status, t.node_lv, t.task_describe, t.demand_change,
        t.delay_describe, t.estimate_hour, t.infact_hour, t.task_mileage, t.create_user_id, t.modify_user_id,
        t.create_time, t.modify_time, a.id AS aid, a.user_id AS auser_id, a.user_name AS auser_name, b.id AS bid, b.user_id AS buser_id,
        b.user_name AS buser_name,
        c.id AS cid, c.user_id AS cuser_id, c.user_name AS cuser_name, p.id AS pid, p.project_name, d.id AS did, d.demand_desc
    </sql>

    <!--zlh-->
    <!--任务管理模块列表展示所用字段-->
    <sql id="TaskManager_ShowTasks_Column_List" >
        t.id, t.task_num, t.task_name, b.id AS bid, b.user_id, b.user_name, t.estimate_start_time, t.estimate_end_time,
        t.actual_start_time, t.actual_end_time, t.task_speed, t.status,
        t.task_type, t.task_mileage, t.priority, c.id AS cid, c.user_id, c.user_name,
        a.id AS aid, a.user_id, a.user_name, t.assign_time, p.id pid, p.project_name
    </sql>

	<!-- 查询逾期任务列表所有字段 -->
	<sql id="TaskOverDue_ShowTasks_Column_List">
	t.id,t.task_num,t.priority,t.task_name,t.assign_user_id,t.task_type,p.id as pid,p.project_name,
	u1.user_name,t.assign_time,t.status,t.estimate_start_time,
	t.estimate_end_time ,t.estimate_hour,DATEDIFF(CURDATE(),t.estimate_start_time)*8 elapsed_time,
	t.estimate_hour - (DATEDIFF(CURDATE(),estimate_start_time)*8) remaining_work,t.task_speed
	</sql>

    <!--zlh-->
    <!--查询所有任务列表-->
    <select id="queryAllTask" resultMap="BaseResultMap">
        select
        <include refid="TaskManager_ShowTasks_Column_List" />
        from task t LEFT JOIN platform_user a ON t.assign_user_id = a.user_id
        LEFT JOIN platform_user b ON t.beassign_user_id = b.user_id
        LEFT JOIN platform_user c on t.create_user_id = c.user_id
        LEFT JOIN project_main p ON t.project_id = p.id
    </select>

    <!--zlh-->
    <!--插入任务-->
    <insert id="insertTask" parameterType="com.camelot.pmt.task.model.Task">
        <selectKey resultType="java.lang.Long" order="AFTER" keyProperty="id">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into task
        <include refid="sql_add_task_columns"/>
        <include refid="sql_add_task_properties"/>
    </insert>

    <!--zlh-->
    <!--条件组合查询-->
    <select id="queryTaskByTask" resultMap="BaseResultMap">
        SELECT
        <include refid="TaskManager_ShowTasks_Column_List" />
        from task t LEFT JOIN platform_user a ON t.assign_user_id = a.user_id
        LEFT JOIN platform_user b ON t.beassign_user_id = b.user_id
        LEFT JOIN platform_user c on t.create_user_id = c.user_id
        LEFT JOIN project_main p ON t.project_id = p.id
        <where>
            <if test="task.taskType != null">and t.task_type = #{task.taskType}</if>
            <if test="task.actualEndTime != null">and Date(t.actual_end_time) = #{task.actualEndTime}</if>
            <if test="task.taskName != null">and t.task_name LIKE "%"#{task.taskName}"%"</if>
            <if test="task.status != null">and t.status = #{task.status}</if>
            <if test="ids != null">
                and t.beassign_user_id in
                <foreach collection="ids" item="idd" open="(" close=")" separator=",">
                    #{idd}
                </foreach>
            </if>
        </where>
    </select>

    <!--zlh-->
    <!--根据id修改数据-->
    <update id="updateTaskById" parameterType="com.camelot.pmt.task.model.Task">
        UPDATE task
        <include refid="sql_update_task"/>
        WHERE id = #{id,jdbcType=BIGINT}
    </update>

    <!--zlh-->
    <!--根据id查询任务详情-->
    <select id="queryTaskById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
        <include refid="ShowAllTasks_Column_List" />
        from task t LEFT JOIN platform_user a ON t.assign_user_id = a.user_id
        LEFT JOIN platform_user b ON t.beassign_user_id = b.user_id
        LEFT JOIN platform_user c on t.create_user_id = c.user_id
        LEFT JOIN project_main p ON t.project_id = p.id
        LEFT JOIN demand d ON t.demand_id = d.id
        WHERE t.id = #{id,jdbcType=BIGINT}
    </select>

    <!--zlh-->
    <!--根据id删除任务-->
    <delete id="deleteTaskById" parameterType="java.lang.Long">
        DELETE FROM task
        WHERE id = #{id,jdbcType=BIGINT}
    </delete>

  <!-- gxl start -->
  	<!--查询任务-->
    <select id="queryTaskNodeById" resultMap="BaseResultMap" parameterType="long">
	    select
		<include refid="ShowAllTasks_Column_List" />
		from
			task t
		INNER JOIN platform_user a ON a.user_id = t.assign_user_id
		INNER JOIN platform_user b ON b.user_id = t.beassign_user_id
		INNER JOIN platform_user c ON c.user_id = t.create_user_id
		LEFT JOIN project_main p ON t.project_id = p.id
		LEFT JOIN demand d ON t.demand_id = d.id
		where t.id = #{id,jdbcType=BIGINT}
    </select>

    <!-- 新增任务 -->
    <insert id="insertTaskNodeById" parameterType="com.camelot.pmt.task.model.Task">
	    insert into task (id, task_num, task_name,
	      task_parent_id, project_id, demand_id, 
	      priority, assign_user_id, beassign_user_id, 
	      assign_time, estimate_start_time, estimate_end_time, 
	      actual_start_time, actual_end_time, task_type, 
	      task_speed, status, node_lv, 
	      task_describe, demand_change, delay_describe, 
	      estimate_hour, infact_hour, task_mileage, 
	      create_user_id, modify_user_id, create_time, 
	      modify_time)
	    values (#{id,jdbcType=BIGINT}, #{taskNum,jdbcType=VARCHAR}, #{taskName,jdbcType=VARCHAR}, 
	      #{taskParentId,jdbcType=BIGINT}, #{project.id,jdbcType=BIGINT}, #{demand.id,jdbcType=BIGINT}, 
	      #{priority,jdbcType=CHAR}, #{assignUser.userId,jdbcType=VARCHAR}, #{beassignUser.userId,jdbcType=VARCHAR}, 
	      #{assignTime,jdbcType=TIMESTAMP}, #{estimateStartTime,jdbcType=TIMESTAMP}, #{estimateEndTime,jdbcType=TIMESTAMP}, 
	      #{actualStartTime,jdbcType=TIMESTAMP}, #{actualEndTime,jdbcType=TIMESTAMP}, #{taskType,jdbcType=CHAR}, 
	      #{taskSpeed,jdbcType=VARCHAR}, #{status,jdbcType=CHAR}, #{nodeLv,jdbcType=CHAR}, 
	      #{taskDescribe,jdbcType=VARCHAR}, #{demandChange,jdbcType=CHAR}, #{delayDescribe,jdbcType=VARCHAR}, 
	      #{estimateHour,jdbcType=BIGINT}, #{infactHour,jdbcType=BIGINT}, #{taskMileage,jdbcType=CHAR}, 
	      #{createUser.userId,jdbcType=VARCHAR}, #{modifyUserId,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
	      #{modifyTime,jdbcType=TIMESTAMP})
  	</insert>
  	
  	<!-- 删除任务 -->
  	<delete id="deleteTaskNodeById" parameterType="long">
	    delete from task
	    where id = #{id,jdbcType=BIGINT}
	  </delete>
    <!--修改任务-->
    <update id="updateTaskNodeById" parameterType="com.camelot.pmt.task.model.Task">
    	update task
		    set task_num = #{taskNum,jdbcType=VARCHAR},
		      task_name = #{taskName,jdbcType=VARCHAR},
		      task_parent_id = #{taskParentId,jdbcType=BIGINT},
		      project_id = #{project.id,jdbcType=BIGINT},
		      demand_id = #{demand.id,jdbcType=BIGINT},
		      priority = #{priority,jdbcType=CHAR},
		      assign_user_id = #{assignUser.userId,jdbcType=VARCHAR},
		      beassign_user_id = #{beassignUser.userId,jdbcType=VARCHAR},
		      assign_time = #{assignTime,jdbcType=TIMESTAMP},
		      estimate_start_time = #{estimateStartTime,jdbcType=TIMESTAMP},
		      estimate_end_time = #{estimateEndTime,jdbcType=TIMESTAMP},
		      actual_start_time = #{actualStartTime,jdbcType=TIMESTAMP},
		      actual_end_time = #{actualEndTime,jdbcType=TIMESTAMP},
		      task_type = #{taskType,jdbcType=CHAR},
		      task_speed = #{taskSpeed,jdbcType=VARCHAR},
		      status = #{status,jdbcType=CHAR},
		      node_lv = #{nodeLv,jdbcType=CHAR},
		      task_describe = #{taskDescribe,jdbcType=VARCHAR},
		      demand_change = #{demandChange,jdbcType=CHAR},
		      delay_describe = #{delayDescribe,jdbcType=VARCHAR},
		      estimate_hour = #{estimateHour,jdbcType=BIGINT},
		      infact_hour = #{infactHour,jdbcType=BIGINT},
		      task_mileage = #{taskMileage,jdbcType=CHAR},
		      create_user_id = #{createUser.userId,jdbcType=VARCHAR},
		      modify_user_id = #{modifyUserId,jdbcType=VARCHAR},
		      create_time = #{createTime,jdbcType=TIMESTAMP},
		      modify_time = #{modifyTime,jdbcType=TIMESTAMP}
		    where id = #{id,jdbcType=BIGINT}
    </update>
    <select id="queryTopTaskNameList" resultMap="BaseResultMap">
    	 select
			t.id,t.task_name
		 from task t where t.task_parent_id is not null 
		 <if test="userId != null">
		 	and t.beassign_user_id = #{userId,jdbcType=VARCHAR}
		 </if>
		 <if test="status != null">
		 	and t.status = #{status,jdbcType=CHAR}
		 </if>
		  order by t.estimate_start_time,t.priority asc
    </select>
  	<!--查询所有任务列表-->
    <select id="queryAllTaskList" resultMap="BaseResultMap" parameterType="com.camelot.pmt.task.model.Task">
	    select
		<include refid="ShowAllTasks_Column_List" />
		from
			task t
		INNER JOIN platform_user a ON a.user_id = t.assign_user_id
		INNER JOIN platform_user b ON b.user_id = t.beassign_user_id
		INNER JOIN platform_user c ON c.user_id = t.create_user_id
		LEFT JOIN project_main p ON t.project_id = p.id
		LEFT JOIN demand d ON t.demand_id = d.id
		where t.beassign_user_id = #{beassignUser.userId,jdbcType=VARCHAR}
		<if test="status != null">
			and t.status = #{status,jdbcType=CHAR}
		</if>
		<if test="taskNum != null">
			and t.task_num like CONCAT('%',#{taskNum,jdbcType=CHAR},'%') 
		</if>
		<if test="taskName != null">
			and t.task_name like CONCAT('%',#{taskName,jdbcType=CHAR},'%') 
		</if>
		<if test="project != null and project.id !=null">
			and t.project_id = #{project.id,jdbcType=CHAR}
		</if>
		<if test="priority != null">
			and t.priority = #{priority,jdbcType=CHAR}
		</if>
		<if test="assignUser != null and assignUser.userId != null">
			and t.assign_user_id = #{assignUser.userId,jdbcType=CHAR}
		</if>
		 order by t.estimate_start_time,t.priority asc
    </select>
    <!--查询我的所有待办任务列表-->
    <select id="queryMyPendingTaskList" resultMap="BaseResultMap" parameterType="com.camelot.pmt.task.model.Task">
	    select
		<include refid="ShowAllTasks_Column_List" />
		from
			task t
		INNER JOIN platform_user a ON a.user_id = t.assign_user_id
		INNER JOIN platform_user b ON b.user_id = t.beassign_user_id
		INNER JOIN platform_user c ON c.user_id = t.create_user_id
		LEFT JOIN project_main p ON t.project_id = p.id
		LEFT JOIN demand d ON t.demand_id = d.id
		where t.beassign_user_id = #{beassignUser.userId,jdbcType=VARCHAR} 
		<if test="status != null">
			and t.status = #{status,jdbcType=CHAR}
		</if>
		<if test="taskNum != null">
			and t.task_num like CONCAT('%',#{taskNum,jdbcType=CHAR},'%') 
		</if>
		<if test="taskName != null">
			and t.task_name like CONCAT('%',#{taskName,jdbcType=CHAR},'%') 
		</if>
		<if test="project != null and project.id !=null">
			and t.project_id = #{project.id,jdbcType=CHAR}
		</if>
		<if test="priority != null">
			and t.priority = #{priority,jdbcType=CHAR}
		</if>
		<if test="assignUser != null and assignUser.userId != null">
			and t.assign_user_id = #{assignUser.userId,jdbcType=CHAR}
		</if>
		 order by t.estimate_start_time,t.priority asc
    </select>
    <!-- 查询taskId下的一级子节点 -->
  	<select id="queryTaskListNodeByParentId" resultMap="BaseResultMap">
  		select
		<include refid="ShowAllTasks_Column_List" />
		from
			task t
		INNER JOIN platform_user a ON a.user_id = t.assign_user_id
		INNER JOIN platform_user b ON b.user_id = t.beassign_user_id
		INNER JOIN platform_user c ON c.user_id = t.create_user_id
		LEFT JOIN project_main p ON t.project_id = p.id
		LEFT JOIN demand d ON t.demand_id = d.id
		where t.task_parent_id = #{id}
		<if test="status != null">
			and t.status = #{status,jdbcType=CHAR}
		</if>
		 order by t.estimate_start_time,t.priority asc
  	</select>
  	<!-- 查询taskId下的我的一级子节点 -->
  	<select id="queryMyTaskListNodeByParentId" resultMap="BaseResultMap">
  		select
		<include refid="ShowAllTasks_Column_List" />
		from
			task t
		INNER JOIN platform_user a ON a.user_id = t.assign_user_id
		INNER JOIN platform_user b ON b.user_id = t.beassign_user_id
		INNER JOIN platform_user c ON c.user_id = t.create_user_id
		LEFT JOIN project_main p ON t.project_id = p.id
		LEFT JOIN demand d ON t.demand_id = d.id
		where t.task_parent_id = #{id} and t.beassign_user_id = #{beassignUserId,jdbcType=VARCHAR}
		<if test="status != null">
			and t.status = #{status,jdbcType=CHAR}
		</if>
		 order by t.estimate_start_time,t.priority asc
	</select>
	<!-- 查询根据任务Id查询父级任务对象 -->
  	<select id="queryParentTaskNodeById" resultMap="BaseResultMap">
  		select
		<include refid="ShowAllTasks_Column_List" />
		from
			task t
		INNER JOIN platform_user a ON a.user_id = t.assign_user_id
		INNER JOIN platform_user b ON b.user_id = t.beassign_user_id
		INNER JOIN platform_user c ON c.user_id = t.create_user_id
		LEFT JOIN project_main p ON t.project_id = p.id
		LEFT JOIN demand d ON t.demand_id = d.id
		where t.id = #{taskParentId,jdbcType=BIGINT}
	</select>
	<!-- 我的待办任务转为延期,会将该节点及节点下的所有子节点变为延期状态 -->
	<update id="updateTaskPendingToDelay" parameterType="com.camelot.pmt.task.model.Task">
		update task t set 
		t.status = #{status,jdbcType=CHAR},t.delay_describe = #{delayDescribe,jdbcType=VARCHAR},t.estimate_start_time = #{estimateStartTime,jdbcType=TIMESTAMP} 
		where t.id = #{id,jdbcType=BIGINT}
	</update>
	<!-- 我的待办任务转为正在进行 -->
	<update id="updateTaskPendingToRunning" parameterType="com.camelot.pmt.task.model.Task">
		update task t set 
		t.status = #{status,jdbcType=CHAR} 
		where t.id = #{id,jdbcType=BIGINT}
	</update>
	<!-- 我的待办任务转为正在进行 -->
	<update id="updateTaskToAssign" parameterType="com.camelot.pmt.task.model.Task">
		update task t set 
		t.assign_user_id = #{assignUserId,jdbcType=VARCHAR},
		t.beassign_user_id = #{beassignUserId,jdbcType=VARCHAR}
		where t.id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateTaskParentIdIsNull" parameterType="com.camelot.pmt.task.model.Task">
		update task t set 
		t.task_parent_id = null
		where t.id = #{id,jdbcType=BIGINT}
	</update>
  <!-- gxl end -->



  <!--zsf-->
  <!--根据项目Id 和 userId 查询出任务个数-->
  <select id="queryUnfinishedTask"  resultType="int">
      select count(*) from task where status in ( 0 , 1 , 3)
      <if test="projectId!=null">
          and project_id = #{projectId}
      </if>
      <if test="userId!=null">
          and beassign_user_id = #{userId}
      </if>
  </select>
    <!--zsf-->
    <!--根据需求Id 查询出任务列表-->
    <select id="queryTaskByDemandId" resultMap="BaseResultMap" parameterType="long">
        select
        <include refid="ShowAllTasks_Column_List" />
        from
        task t
        INNER JOIN platform_user a ON a.user_id = t.assign_user_id
        INNER JOIN platform_user b ON b.user_id = t.beassign_user_id
        INNER JOIN platform_user c ON c.user_id = t.create_user_id
        where t.beassign_user_id = #{beassignUserId,jdbcType=VARCHAR}
        <if test="demandId != null">
            and t.demand_id = #{demandId,jdbcType=BIGINT}
        </if>
    </select>
    <!--zsf-->
    <!--查询已完成的任务-->
    <select id="listTaskAlready" resultMap="BaseResultMap" parameterType="String">
        SELECT
        <include refid="selectAllRunningTaskByUserId" />
        FROM task ta
        LEFT JOIN demand de ON ta.demand_id = de.id
        LEFT JOIN project_main pro ON ta.project_id = pro.id
        LEFT JOIN platform_user pl ON ta.assign_user_id = pl.user_id
        LEFT JOIN platform_user pl2 ON ta.beassign_user_id = pl2.user_id
        WHERE ta.status in ( 2, 4 ,5 ) AND ta.beassign_user_id = #{id}
        ORDER BY ta.create_time DESC, ta.priority DESC
    </select>
    <!-- zsf-->
    <!--重做-->
    <update id="updateTaskAlreadyToRunning" parameterType="java.util.List">
        UPDATE task SET status = 1 WHERE
        <foreach collection="list" item="aid" open="(" close=")" separator="or">
            id = #{aid}
        </foreach> AND status = 2
    </update>
    <!-- zsf-->
    <!--提测-->
    <update id="updateTaskToTest" parameterType="long">
        UPDATE task SET status = 5 WHERE id = #{id}
    </update>

   <!--  查询逾期列表 -->
    <select id="queryOverdueTask" resultType="map" parameterType="com.camelot.pmt.task.model.Task">
    	select
    	<include refid="TaskOverDue_ShowTasks_Column_List" />
    	from task t
    	LEFT JOIN project_main p on p.id =t.project_id
		LEFT JOIN platform_user u1 on u1.user_id = t.beassign_user_id
		WHERE t.status = 3
		<if test="taskNum != null and  taskNum != '' " >
			and t.task_num LIKE  "%"#{taskNum,jdbcType=CHAR}"%"
		</if>
		<if test="taskName != null and  taskName != '' ">
			and t.task_name LIKE  "%"#{taskName,jdbcType=CHAR}"%"
		</if>
		<if test="taskType != null and  taskType != '' ">
			and t.task_type = #{taskType,jdbcType=CHAR}
		</if>
		<if test="beassignUser != null and beassignUser.username !=null">
			and u1.user_name LIKE "%"#{beassignUser.username,jdbcType=CHAR}"%"
		</if>
		ORDER BY t.priority ASC,t.estimate_start_time DESC
    </select>
    
	 <!-- 添加延期信息与预定开始时间 -->
    <update id="insertOverduMessage" parameterType="com.camelot.pmt.task.model.Task">   
    	update task t set 
		t.estimate_start_time = #{estimateStartTime,jdbcType=TIMESTAMP},
		t.delay_describe=#{delayDescribe}
		where t.id = #{id}
    </update>
    
    <!-- 根据任务Id修改状态 -->
    <update id="updateTaskOverdueStatus" parameterType="String">
    	update task t set 
		t.status = 1 
		where t.id = #{taskId}
    </update>
    
   <!--  延期任务详情片段 -->
    <sql id="queryOverdueTaskDetailByTaskId_Sql_colnum">
        t.id, t.task_num, t.task_name, t.task_parent_id, t.project_id, t.demand_id, t.priority, t.assign_user_id,
		t.beassign_user_id, t.assign_time, t.estimate_start_time, t.estimate_end_time, t.actual_start_time,
		t.actual_end_time, t.task_type, t.task_speed, t.status, t.node_lv, t.task_describe, t.demand_change,
		t.delay_describe, t.estimate_hour, t.infact_hour, t.task_mileage, t.create_user_id, t.modify_user_id,
		t.create_time, t.modify_time, a.id AS aid, a.user_id, a.user_name, b.id AS bid, b.user_id, b.user_name,
		c.id AS cid, c.user_id, c.user_name, p.id AS pid, p.project_name, d.id AS did, d.demand_desc
    </sql>
    
   <!--  查询逾期任务详情 -->
    <select id="queryOverdueTaskDetailByTaskId" parameterType="String" resultType="map">
    	SELECT
		<include refid="queryOverdueTaskDetailByTaskId_Sql_colnum"></include>
		from task t LEFT JOIN platform_user a ON t.assign_user_id = a.user_id
		LEFT JOIN platform_user b ON t.beassign_user_id = b.user_id
		LEFT JOIN platform_user c on t.create_user_id = c.user_id
		LEFT JOIN project_main p ON t.project_id = p.id
		LEFT JOIN demand d ON t.demand_id = d.id
		WHERE t.id = #{taskId}
    </select>

    <!--myp开始-->
    <!--根据用户查询所有正在进行的任务的SQL-->
    <sql id="selectAllRunningTaskByUserId">
        ta.id, ta.task_num, ta.task_name, ta.task_parent_id, ta.project_id, ta.demand_id, ta.priority, ta.assign_user_id,
        ta.beassign_user_id, ta.assign_time, ta.estimate_start_time, ta.estimate_end_time, ta.actual_start_time,
        ta.actual_end_time, ta.task_type, ta.task_speed, ta.status, ta.node_lv, ta.task_describe, ta.demand_change,
        ta.delay_describe, ta.estimate_hour, ta.infact_hour, ta.task_mileage, ta.create_user_id, ta.modify_user_id,
        ta.create_time, ta.modify_time, de.demand_name, de.demand_desc, pro.project_name,pro.project_desc, pl.user_name,
        pl2.user_name
    </sql>

    <!--查询正在进行的任务-->
    <select id="queryTaskRunning" resultMap="BaseResultMap" parameterType="String">
        SELECT
        <include refid="selectAllRunningTaskByUserId" />
        FROM task ta
        LEFT JOIN demand de ON ta.demand_id = de.id
        LEFT JOIN project_main pro ON ta.project_id = pro.id
        LEFT JOIN platform_user pl ON ta.assign_user_id = pl.user_id
        LEFT JOIN platform_user pl2 ON ta.beassign_user_id = pl2.user_id
        WHERE ta.status = 1 AND ta.beassign_user_id = #{id}
        ORDER BY ta.create_time DESC, ta.priority DESC
    </select>

    <!--根据父级id查询所有的子任务-->
    <select id="queryByPId" parameterType="Long" resultType="com.camelot.pmt.task.model.Task">
        SELECT * FROM task WHERE task_parent_id = #{pid}
    </select>
    <!--根据任务id关闭任务-->
    <update id="updateRunningToClose" parameterType="java.util.List">
        UPDATE task SET status = 3 WHERE
        <foreach collection="list" item="aid" open="(" close=")" separator="or">
            id = #{aid}
        </foreach>
    </update>
    <!--完成任务-->
    <select id="queryRunningToAlready" parameterType="java.util.List" resultType="com.camelot.pmt.task.model.Task">
        SELECT * FROM task WHERE
        <foreach collection="list" item="id" open="(" close=")" separator="or">
            id = #{id}
        </foreach>
    </select>

    <update id="updateRunningToAlready" parameterType="Long">
        UPDATE task SET status = 2 WHERE id = #{id}
    </update>
    
    <update id="updateInfact_hourAndActual_end_time" parameterType="com.camelot.pmt.task.model.Task">
        UPDATE task SET actual_end_time = #{actualEndTime},infact_hour = #{infactHour} WHERE id = #{id}
    </update>
    
    <insert id="addAttachment" parameterType="com.camelot.pmt.task.model.TaskFile">
        INSERT INTO attachment (attachment_url,
        attachment_tile,attachment_source,source_id,create_user_id,create_time,modify_user_id,modify_time)
        VALUES (#{attachmentUrl},#{attachmentTile},#{attachmentSource},#{sourceId},#{createUserId},
        #{createTime},#{modifyUserId},#{modifyTime})
    </insert>
    <!--myp结束-->
    
   <!--  超时提前列表 -->
    <select id="queryleaddeferredTaskRemindersList" parameterType="int" resultType="map">
		select * from (
		select t.id,t.task_num,t.priority,t.task_name,t.assign_user_id,t.task_type,p.id as pid,p.project_name,
			u1.user_name,t.assign_time,t.status,t.estimate_start_time,
			t.estimate_end_time ,t.estimate_hour,DATEDIFF(CURDATE(),t.estimate_start_time) elapsed_time
		from task t
		    LEFT JOIN project_main p on p.id =t.project_id
				LEFT JOIN platform_user u1 on u1.user_id = t.beassign_user_id 
		) f where elapsed_time <![CDATA[ <= ]]> #{leadtime} and elapsed_time <![CDATA[ <= ]]> 0 and status = 0
    </select>
    
    <select id="querydelaytimedeferredTaskRemindersList" parameterType="int" resultType="map">
	    select * from (
		select t.id,t.task_num,t.priority,t.task_name,t.assign_user_id,t.task_type,p.id as pid,p.project_name,
			u1.user_name,t.assign_time,t.status,t.estimate_start_time,
			t.estimate_end_time ,t.estimate_hour,DATEDIFF(CURDATE(),t.estimate_start_time) elapsed_time
		from task t
		    LEFT JOIN project_main p on p.id =t.project_id
				LEFT JOIN platform_user u1 on u1.user_id = t.beassign_user_id 
		) f where elapsed_time <![CDATA[ >= ]]> #{delaytime}  and status = 0
    </select>
</mapper>